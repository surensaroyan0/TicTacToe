<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
</head>
<body>
    <div class="flex">
        <img src="~/img/undo.png" alt="Undo Icon" id="undo">
        <img src="~/img/redo.png" alt="Redo Icon" id="redo">
    </div>
    <div class="grid-container"></div>
    <form id="moveForm" method="post">
        <input type="hidden" id="row" name="row">
        <input type="hidden" id="col" name="col">
        <input type="hidden" id="player" name="player">
    </form>

    <script>
        const gridContainer = document.querySelector('.grid-container');
        const undo = document.getElementById('undo');
        const redo = document.getElementById('redo');
        const boardSize = 100;
        
        let currentPlayer = 'X';

        for (let row = 0; row < boardSize; row++) {
            for (let col = 0; col < boardSize; col++) {
                const gridItem = document.createElement('div');

                gridItem.classList.add('grid-item');
                gridItem.dataset.row = row;
                gridItem.dataset.col = col;
                gridItem.onclick = function() {
                    if (!gridItem.innerHTML) {
                        gridItem.innerHTML = currentPlayer;
                        gridItem.style.color = 'red';

                        const clickedRow = gridItem.dataset.row;
                        const clickedCol = gridItem.dataset.col;
                        
                        makeMove(clickedRow, clickedCol, currentPlayer);
                        currentPlayer = 'O';
                    }
                };
                gridContainer.appendChild(gridItem);
            }
        }

        async function makeMove(row, col, player) {
            const response = await fetch('', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    row: parseInt(row, 10),
                    col: parseInt(col, 10),
                    player: player
                })
            });
            const data = await response.json();

            if (data.opponentMove) {
                const opponentMove = data.opponentMove;
                const opponentCell = document.querySelector(`[data-row="${opponentMove.item1}"][data-col="${opponentMove.item2}"]`);
             
                opponentCell.innerHTML = 'O';
                opponentCell.style.color = 'blue';
            }

            if (data.isDraw) {
                alert("The game is draw!");
                location.reload();
            } else if (data.winner) {
                alert(`The player ${data.winner} won!`);
                location.reload();
            } else {
                currentPlayer = 'X';   
            }
        } 

        undo.addEventListener('click', async() => {
            const response = await fetch('/undo-moves', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'  
                }
            });
            const data = await response.json();

            if (data.undoStack.length >= 1) {
                const lastMove = data.undoStack.pop();
                const secondLastMove = data.undoStack.pop();
                const firstCell = document.querySelector(`[data-row="${lastMove.row}"][data-col="${lastMove.col}"]`);
                const secondCell = document.querySelector(`[data-row="${secondLastMove.row}"][data-col="${secondLastMove.col}"]`);

                firstCell.innerHTML = '';
                secondCell.innerHTML = ''; 
                firstCell.style.color = '';
                secondCell.style.color = '';
            }
        });

        redo.addEventListener('click', async() => {
            const response = await fetch('/redo-moves', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'  
                }
            });
            const data = await response.json();

            if (data.redoStack.length >= 1) {
                const lastMove = data.redoStack.pop();
                const secondLastMove = data.redoStack.pop();
                const firstCell = document.querySelector(`[data-row="${lastMove.row}"][data-col="${lastMove.col}"]`);
                const secondCell = document.querySelector(`[data-row="${secondLastMove.row}"][data-col="${secondLastMove.col}"]`);

                firstCell.innerHTML = lastMove.player;
                secondCell.innerHTML = secondLastMove.player; 
                firstCell.style.color = lastMove.player === 'X' ? 'red' : 'blue';
                secondCell.style.color = secondLastMove.player === 'X' ? 'red' : 'blue';
            }
        });

        window.addEventListener('load', async() => {
            await fetch('/clear-session', { method: 'POST' });
        });
    </script>
</body>
</html>
